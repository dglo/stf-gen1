/* STFParameterLookup.java, autogenerated by genspl.awk */

package icecube.daq.stf;

import icecube.daq.db.stftest.STFParameter;
import icecube.daq.db.domprodtest.DOMProdTestException;
import java.util.HashMap;
import java.io.IOException;

public class STFParameterLookup {
  private static HashMap lookup;
  public static final STFParameter STFParameterLookup(String test,
                                                      String name)
    throws DOMProdTestException, IOException {
    if (lookup==null) lookup = mkLookup(); /* FIXME: lock here? above? */
    HashMap pm = (HashMap) lookup.get(test);
    if (pm==null) return null;
    return (STFParameter) pm.get(name);
  }

  private static final HashMap mkLookup() 
    throws DOMProdTestException, IOException {
    HashMap ret = new HashMap(), hm;
    STFParameter p;

    ret.put(hm=new HashMap(), "ADC");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("0");
    hm.put(p, "adc_chip");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("7");
    hm.put(p, "adc_channel");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("1");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "adc_mean_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_rms_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_max_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_min_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_mean_mvolt_or_mamp");
    p = new STFParameter( false );
    hm.put(p, "adc_rms_mvolt_or_mamp");
    p = new STFParameter( false );
    hm.put(p, "adc_max_mvolt_or_mamp");
    p = new STFParameter( false );
    hm.put(p, "adc_min_mvolt_or_mamp");

    ret.put(hm=new HashMap(), "memory");
    p = new STFParameter( true );
    p.setDefaultValue("10");
    p.setMinValue("1");
    p.setMaxValue("1000");
    hm.put(p, "loopCount");
    p = new STFParameter( true );
    p.setDefaultValue("1024");
    p.setMinValue("1");
    p.setMaxValue("2097152");
    hm.put(p, "count");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2097152");
    hm.put(p, "address");
    p = new STFParameter( true );
    p.setDefaultValue("stuck-address");
    hm.put(p, "testName");

    ret.put(hm=new HashMap(), "StfEg");
    p = new STFParameter( true );
    p.setDefaultValue("false");
    hm.put(p, "Para1");
    p = new STFParameter( true );
    p.setDefaultValue("bananas");
    hm.put(p, "Para2");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("1000");
    hm.put(p, "Para3");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("281474976710656");
    hm.put(p, "Para4");
    p = new STFParameter( false );
    hm.put(p, "Para5");
    p = new STFParameter( false );
    hm.put(p, "Para6");
    p = new STFParameter( false );
    hm.put(p, "Para7");
    p = new STFParameter( false );
    hm.put(p, "Para8");
    p = new STFParameter( false );
    hm.put(p, "Para9");

    ret.put(hm=new HashMap(), "atwd_pedestal");
    p = new STFParameter( true );
    p.setDefaultValue("850");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_sampling_speed_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2097");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_top_dac");
    p = new STFParameter( true );
    p.setDefaultValue("3000");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_bias_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2048");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_analog_ref_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2");
    hm.put(p, "atwd_channel");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_trig_forced_or_spe");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("-5000");
    p.setMaxValue("5000");
    hm.put(p, "spe_descriminator_uvolt");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("1");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "atwd_pedestal_amplitude");
    p = new STFParameter( false );
    hm.put(p, "atwd_pedestal_pattern");
    p = new STFParameter( false );
    hm.put(p, "atwd_spe_disc_threshold_dac");

    ret.put(hm=new HashMap(), "atwd_baseline");
    p = new STFParameter( true );
    p.setDefaultValue("850");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_sampling_speed_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2097");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_top_dac");
    p = new STFParameter( true );
    p.setDefaultValue("3000");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_bias_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2048");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_analog_ref_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2");
    hm.put(p, "atwd_channel");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_trig_forced_or_spe");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("-5000");
    p.setMaxValue("5000");
    hm.put(p, "spe_discriminator_uvolt");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("2");
    p.setMaxValue("100000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "atwd_baseline_mean");
    p = new STFParameter( false );
    hm.put(p, "atwd_baseline_rms");
    p = new STFParameter( false );
    hm.put(p, "atwd_baseline_min");
    p = new STFParameter( false );
    hm.put(p, "atwd_baseline_max");
    p = new STFParameter( false );
    hm.put(p, "atwd_baseline_histogram");
    p = new STFParameter( false );
    hm.put(p, "atwd_spe_disc_threshold_dac");

    ret.put(hm=new HashMap(), "pmt_hv_ramp");
    p = new STFParameter( true );
    p.setDefaultValue("800");
    p.setMinValue("0");
    p.setMaxValue("2047");
    hm.put(p, "hv_min_volt");
    p = new STFParameter( true );
    p.setDefaultValue("2047");
    p.setMinValue("0");
    p.setMaxValue("2047");
    hm.put(p, "hv_max_volt");
    p = new STFParameter( true );
    p.setDefaultValue("50");
    p.setMinValue("10");
    p.setMaxValue("300");
    hm.put(p, "hv_step_volt");
    p = new STFParameter( false );
    hm.put(p, "hv_worst_set_mvolt");
    p = new STFParameter( false );
    hm.put(p, "hv_worst_read_mvolt");

    ret.put(hm=new HashMap(), "pmt_hv_stability");
    p = new STFParameter( true );
    p.setDefaultValue("1500");
    p.setMinValue("0");
    p.setMaxValue("2047");
    hm.put(p, "hv_set_volt");
    p = new STFParameter( true );
    p.setDefaultValue("300");
    p.setMinValue("5");
    p.setMaxValue("3600");
    hm.put(p, "run_time_sec");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("10");
    p.setMaxValue("10000");
    hm.put(p, "sample_time_ms");
    p = new STFParameter( true );
    p.setDefaultValue("15");
    p.setMinValue("0");
    p.setMaxValue("600");
    hm.put(p, "init_wait_sec");
    p = new STFParameter( false );
    hm.put(p, "hv_read_mean_mvolt");
    p = new STFParameter( false );
    hm.put(p, "hv_read_min_mvolt");
    p = new STFParameter( false );
    hm.put(p, "hv_read_max_mvolt");
    p = new STFParameter( false );
    hm.put(p, "hv_read_rms_mvolt");

    ret.put(hm=new HashMap(), "pressure");
    p = new STFParameter( true );
    p.setDefaultValue("True");
    hm.put(p, "dom_sealed");
    p = new STFParameter( true );
    p.setDefaultValue("False");
    hm.put(p, "use_temperature");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("0");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "adc_5v_mean_mvolts");
    p = new STFParameter( false );
    hm.put(p, "adc_mean_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_rms_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_max_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_min_counts");
    p = new STFParameter( false );
    hm.put(p, "adc_mean_kpascal");
    p = new STFParameter( false );
    hm.put(p, "adc_rms_kpascal");
    p = new STFParameter( false );
    hm.put(p, "adc_max_kpascal");
    p = new STFParameter( false );
    hm.put(p, "adc_min_kpascal");

    ret.put(hm=new HashMap(), "pulser_spe_mpe");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    hm.put(p, "pulse_height");
    p = new STFParameter( true );
    p.setDefaultValue("500");
    hm.put(p, "discriminator_level");
    p = new STFParameter( true );
    p.setDefaultValue("False");
    hm.put(p, "mpe_discriminator");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1200");
    hm.put(p, "repetition_rate");
    p = new STFParameter( false );
    hm.put(p, "measured_rate");
    p = new STFParameter( false );
    hm.put(p, "actual_rate");
    p = new STFParameter( false );
    hm.put(p, "discriminator_dac");

    ret.put(hm=new HashMap(), "atwd_pedestal_sweep_forced");
    p = new STFParameter( true );
    p.setDefaultValue("850");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_sampling_speed_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2097");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_top_dac");
    p = new STFParameter( true );
    p.setDefaultValue("3000");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_bias_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2048");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_analog_ref_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ch0_clamp");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2");
    hm.put(p, "atwd_channel");
    p = new STFParameter( true );
    p.setDefaultValue("1500");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "full_range_mv");
    p = new STFParameter( false );
    hm.put(p, "half_range_counts_per_volt");
    p = new STFParameter( false );
    hm.put(p, "full_range_counts_per_volt");
    p = new STFParameter( false );
    hm.put(p, "linearity_pedestal_percent");
    p = new STFParameter( false );
    hm.put(p, "atwd_pedestal_sweep_forced");

    ret.put(hm=new HashMap(), "atwd_pulser_spe");
    p = new STFParameter( true );
    p.setDefaultValue("850");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_sampling_speed_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2097");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_top_dac");
    p = new STFParameter( true );
    p.setDefaultValue("3000");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_bias_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2048");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_analog_ref_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ch0_clamp");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2");
    hm.put(p, "atwd_channel");
    p = new STFParameter( true );
    p.setDefaultValue("5000");
    p.setMinValue("0");
    p.setMaxValue("5000000");
    hm.put(p, "pulser_amplitude_uvolt");
    p = new STFParameter( true );
    p.setDefaultValue("true");
    hm.put(p, "pedestal_subtraction");
    p = new STFParameter( true );
    p.setDefaultValue("50");
    hm.put(p, "n_pedestal_waveforms");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("0");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "triggerable_spe_dac");
    p = new STFParameter( false );
    hm.put(p, "atwd_baseline_waveform");
    p = new STFParameter( false );
    hm.put(p, "atwd_waveform_width");
    p = new STFParameter( false );
    hm.put(p, "atwd_waveform_amplitude");
    p = new STFParameter( false );
    hm.put(p, "atwd_waveform_position");
    p = new STFParameter( false );
    hm.put(p, "atwd_expected_amplitude");
    p = new STFParameter( false );
    hm.put(p, "atwd_waveform_pulser_spe");

    ret.put(hm=new HashMap(), "atwd_pedestal_spe");
    p = new STFParameter( true );
    p.setDefaultValue("850");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_sampling_speed_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2097");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_top_dac");
    p = new STFParameter( true );
    p.setDefaultValue("3000");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_bias_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2048");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_analog_ref_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ch0_clamp");
    p = new STFParameter( true );
    p.setDefaultValue("1");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2");
    hm.put(p, "atwd_channel");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("1");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "atwd_pedestal_amplitude");
    p = new STFParameter( false );
    hm.put(p, "atwd_pedestal_pattern");
    p = new STFParameter( false );
    hm.put(p, "atwd_spe_disc_threshold_dac");

    ret.put(hm=new HashMap(), "atwd_clock1x_forced");
    p = new STFParameter( true );
    p.setDefaultValue("850");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_sampling_speed_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2097");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_top_dac");
    p = new STFParameter( true );
    p.setDefaultValue("3000");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_ramp_bias_dac");
    p = new STFParameter( true );
    p.setDefaultValue("2048");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_analog_ref_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("1000");
    p.setMinValue("1");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "atwd_clock1x_amplitude");
    p = new STFParameter( false );
    hm.put(p, "atwd_sampling_speed_MHz");
    p = new STFParameter( false );
    hm.put(p, "atwd_sampling_speed_dac_300MHz");
    p = new STFParameter( false );
    hm.put(p, "atwd_clock1x_waveform");

    ret.put(hm=new HashMap(), "pmt_pv_ratio");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("1");
    hm.put(p, "atwd_chip_a_or_b");
    p = new STFParameter( true );
    p.setDefaultValue("0");
    p.setMinValue("0");
    p.setMaxValue("2");
    hm.put(p, "atwd_channel");
    p = new STFParameter( true );
    p.setDefaultValue("60");
    p.setMinValue("5");
    p.setMaxValue("500");
    hm.put(p, "atwd_spe_height");
    p = new STFParameter( true );
    p.setDefaultValue("10000");
    p.setMinValue("2000");
    p.setMaxValue("20000");
    hm.put(p, "pv_trig_cnt");
    p = new STFParameter( false );
    hm.put(p, "pv_ratio_10");
    p = new STFParameter( false );
    hm.put(p, "hist_spe_peak");
    p = new STFParameter( false );
    hm.put(p, "hist_array");
    p = new STFParameter( false );
    hm.put(p, "spe_disc_dac");
    p = new STFParameter( false );
    hm.put(p, "hv_set_volt");

    ret.put(hm=new HashMap(), "fadc_fe_pulser");
    p = new STFParameter( true );
    p.setDefaultValue("700");
    p.setMinValue("0");
    p.setMaxValue("1023");
    hm.put(p, "fadc_reference_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("5000");
    p.setMinValue("0");
    p.setMaxValue("5000000");
    hm.put(p, "pulser_amplitude_uvolt");
    p = new STFParameter( true );
    p.setDefaultValue("100");
    p.setMinValue("0");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "triggerable_spe_dac");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_mean");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_amplitude");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_width");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_position");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_waveform");

    ret.put(hm=new HashMap(), "fadc_baseline");
    p = new STFParameter( true );
    p.setDefaultValue("700");
    p.setMinValue("0");
    p.setMaxValue("1023");
    hm.put(p, "fadc_reference_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("110");
    p.setMinValue("0");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_mean");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_rms");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_min");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_max");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_histogram");

    ret.put(hm=new HashMap(), "fadc_fe_forced");
    p = new STFParameter( true );
    p.setDefaultValue("700");
    p.setMinValue("0");
    p.setMaxValue("1023");
    hm.put(p, "fadc_reference_dac");
    p = new STFParameter( true );
    p.setDefaultValue("1925");
    p.setMinValue("0");
    p.setMaxValue("4095");
    hm.put(p, "atwd_pedestal_dac");
    p = new STFParameter( true );
    p.setDefaultValue("5000");
    p.setMinValue("0");
    p.setMaxValue("5000000");
    hm.put(p, "pulser_amplitude_uvolt");
    p = new STFParameter( true );
    p.setDefaultValue("100");
    p.setMinValue("0");
    p.setMaxValue("1000000");
    hm.put(p, "loop_count");
    p = new STFParameter( false );
    hm.put(p, "fadc_baseline_mean");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_amplitude");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_width");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_position");
    p = new STFParameter( false );
    hm.put(p, "fadc_fe_pulser_waveform");

    return ret;
  } /* mkLookup */
} /* STFParameterLookup */
