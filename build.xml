<?xml version="1.0"?>

<project name="@PROJECT@" default="report" >
    <description>
Build the library and documentation for the "@PROJECT@" project.
    </description>

    <target name="setProperties">
        <property file="./project.properties"/>

        <property name="base_build_dir" value="../build" />
        <property name="lib_dir" value="../lib" />
        <property name="base_docs_dir" value="../docs" />

        <property name="tools_lib_dir" value="../tools/lib" />
        <property name="templates_dir" value="../templates" />

        <property name="build_dir" value="${base_build_dir}/${project}" />
        <property name="api_dir" value="${base_docs_dir}/api/${project}" />
        <property name="junit_dir" value="${base_docs_dir}/junit" />
        <property name="junit_text_dir" value="${junit_dir}/text/${project}" />

        <property name="include_dir" value="./include" />
        <property name="source_dir" value="./source" />
        <property name="platform" value="${os.name}-${os.arch}" />
        <property name="platform_include_dir" value="${include_dir}/${platform}" />
        <property name="platform_source_dir" value="${source_dir}/${platform}" />
        <property name="platform_build_dir" value="${base_build_dir}/${platform}/${project}" />

        <property name="PACKAGE" value="${default_package}" />
        <property name="package_dir" value="${default_package_dir}" />
        <property name="search_dir" value="**" />
        <property name="src_dir" value="./src" />
        <property name="resource_dir" value="./resources" />
        <property name="project_manifest" value="project.MF" />
        <property name="test_manifest" value="test.MF" />
        <property name="institution" value="LBNL" />

        <tstamp>
            <format property="create.year" pattern="yyyy" />
        </tstamp>

        <tstamp/>
    </target>

    <target name="createFromTemplate" >
        <mkdir dir="${src_dir}/${destination_dir}" />
        <copy todir="${src_dir}/${destination_dir}" filtering="true" >
            <fileset dir="${templates_dir}">
                <include name="${create.classtype}${create.filetype}" />
            </fileset>
            <filterset>
                <filter token="TYPE" value="${create.classtype}" />
                <filter token="PACKAGE" value="${PACKAGE}" />
                <filter token="CLASS" value="${CLASS}" />
                <filter token="USER" value="${user.name}" />
                <filter token="DATE" value="${TODAY}" />
                <filter token="year" value="${create.year}" />
                <filter token="institution" value="${institution}" />
            </filterset>
            <mapper type="glob" from="${create.classtype}*" to="${CLASS}*" />
        </copy>
    </target>

    <target name="createTest" depends="setProperties" if="CLASS" unless="notest" >
          <antcall target="createFromTemplate">
              <param name="create.classtype" value="class" />
              <param name="create.filetype" value="Test.java" />
              <param name="destination_dir" value="${package_dir}/test" />
          </antcall>
    </target>

    <target name="createClass" depends="createTest" if="CLASS" description="Create new .java files for a class an its matching test">
          <antcall target="createFromTemplate">
              <param name="create.classtype" value="class" />
              <param name="create.filetype" value=".java" />
              <param name="destination_dir" value="${package_dir}" />
          </antcall>
    </target>

    <target name="createNoRunTest" depends="setProperties" if="CLASS" unless="notest">
          <antcall target="createFromTemplate">
              <param name="create.classtype" value="class" />
              <param name="create.filetype" value="NoRunTest.java" />
              <param name="destination_dir" value="${package_dir}/test" />
          </antcall>
    </target>

    <target name="createInterface" depends="createNoRunTest" if="CLASS" description="Create new .java files for an interface an its matching test">
          <antcall target="createFromTemplate">
              <param name="create.classtype" value="interface" />
              <param name="create.filetype" value=".java" />
              <param name="destination_dir" value="${package_dir}" />
          </antcall>
    </target>

    <target name="dependencyPath" depends="setProperties">
        <mkdir dir="${lib_dir}" />
        <path id="dependencies.path">
            <fileset dir="${lib_dir}" includes="${all.dependencies}" />
            <fileset dir="${tools_lib_dir}" includes="${all.dependencies}" />
        </path>
    </target>

    <target name="compile.java" depends="setProperties,dependencyPath" if="java.used">
        <patternset id="project.java.files" >
            <include name="${search_dir}/*.java"/>
            <include name="${search_dir}/test/*.java"/>
        </patternset>

        <mkdir dir="${build_dir}" />
        <javac destdir="${build_dir}">
            <classpath>
                <path refid="dependencies.path"/>
            </classpath>
            <src path="${src_dir}"/>
            <patternset refid="project.java.files"/>
        </javac>
    </target>

    <target name="compile.c" depends="setProperties,dependencyPath" if="c.used">
        <exec executable="gmake">
           <arg value="-fstandard.mk"/>
           <arg value="PROJECT=${project}"/>
           <arg value="PLATFORM=${platform}"/>
           <arg value="C_BIN_NAMES=${c.bin.names}"/>
           <arg value="compile"/>
        </exec>
    </target>

    <target name="compile" depends="compile.c,compile.java" description="Compile this project">
    </target>

    <target name="manifest" depends="setProperties" if="java.used">
        <mkdir dir="${build_dir}" />
        <delete>
            <fileset dir="${build_dir}">
                <include name="${project_manifest}" />
                <include name="${test_manifest}" />
            </fileset>
        </delete>
        <copy todir="${build_dir}" filtering="true" >
            <fileset dir="${templates_dir}">
                <include name="MANIFEST.MF" />
            </fileset>
            <filterset>
                <filter token="DEPENDENCIES" value="${project.dependencies}" />
            </filterset>
            <mapper type="glob" from="MANIFEST.MF" to="${project_manifest}" />
        </copy>
        <copy todir="${build_dir}" filtering="true" >
            <fileset dir="${templates_dir}">
                <include name="MANIFEST.MF" />
            </fileset>
            <filterset>
                <filter token="DEPENDENCIES" value="${project}.jar ${test.dependencies}" />
            </filterset>
            <mapper type="glob" from="MANIFEST.MF" to="${test_manifest}" />
        </copy>
    </target>

    <target name="lib.java" depends="compile.java,manifest" if="java.used">
        <patternset id="project.class.files" >
            <include name="${search_dir}/*.class"/>
            <exclude name="${search_dir}/test/*.class"/>
        </patternset>
        <patternset id="test.class.files" >
            <include name="${search_dir}/test/*.class"/>
        </patternset>

        <mkdir dir="${lib_dir}" />
        <jar jarfile="${lib_dir}/${project}.jar" manifest="${build_dir}/${project_manifest}">
            <fileset dir="${build_dir}">
                <patternset refid="project.class.files"/>
            </fileset>
            <fileset dir="${resource_dir}">
                <exclude name="test"/>
                <exclude name="test/**/*"/>
                <exclude name="**/.*"/>
            </fileset>
        </jar>
        <jar jarfile="${lib_dir}/${project}-test.jar" manifest="${build_dir}/${test_manifest}">
            <fileset dir="${build_dir}">
                <patternset refid="test.class.files"/>
            </fileset>
            <fileset dir="${resource_dir}">
                <include name="test/**/*"/>
                <exclude name="**/.*"/>
            </fileset>
        </jar>
    </target>

    <target name="lib.c" depends="setProperties" if="c.used">
        <exec executable="gmake">
           <arg value="-fstandard.mk"/>
           <arg value="PROJECT=${project}"/>
           <arg value="PLATFORM=${platform}"/>
           <arg value="C_BIN_NAMES=${c.bin.names}"/>
           <arg value="lib"/>
        </exec>
    </target>

    <target name="lib" depends="lib.java,lib.c" description="Create the libraries for this project">
    </target>

    <target name="bin.c" depends="setProperties" if="c.used">
        <exec executable="gmake">
           <arg value="-fstandard.mk"/>
           <arg value="PROJECT=${project}"/>
           <arg value="PLATFORM=${platform}"/>
           <arg value="C_BIN_NAMES=${c.bin.names}"/>
           <arg value="bin"/>
        </exec>
    </target>

    <target name="bin" depends="bin.c" description="Create the binaries for this project">
    </target>

    <target name="singletest" depends="lib" if="CLASS">
        <mkdir dir="${junit_text_dir}" />
        <junit printsummary="yes">
            <formatter type="xml" />
            <classpath>
                <pathelement path="${lib_dir}/${project}-test.jar" />
                <path refid="dependencies.path"/>
            </classpath>
            <test name="${PACKAGE}.test.${CLASS}Test" todir="${junit_text_dir}" />
        </junit>
    </target>

    <target name="multitest" depends="lib" unless="CLASS">
        <patternset id="project.javas.runableTests" >
            <include name="${search_dir}/test/*Test.java"/>
            <exclude name="${search_dir}/test/*NoRunTest.java"/>
        </patternset>

        <mkdir dir="${junit_text_dir}" />
        <junit printsummary="yes">
            <formatter type="xml" />
            <classpath>
                <pathelement path="${lib_dir}/${project}-test.jar" />
                <path refid="dependencies.path"/>
            </classpath>
            <batchtest fork="yes" todir="${junit_text_dir}">
                <fileset dir="${src_dir}">
                    <patternset refid="project.javas.runableTests"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test" depends="multitest,singletest" description="Run the tests for this project">
    </target>

    <target name="report" depends="test" description="Create the report on the tests run for this project">
        <mkdir dir="${junit_text_dir}" />
        <junitreport todir="${junit_text_dir}">
            <fileset dir="${junit_text_dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit_dir}"/>
        </junitreport>
    </target>

     <target name="javadocs" depends="setProperties,dependencyPath" description="Create the Javadocs for this project">
        <mkdir dir="${api_dir}" />
        <javadoc sourcepath="${src_dir}"
                defaultexcludes="yes"
                destdir="${api_dir}"
                author="true"
                version="true"
                use="true"
                windowtitle="IceCube's Java Software API">
            <package name="*.*"/>
            <doctitle>
                <![CDATA[<h1>IceCube Analysis Framework</h1>]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; ${create.year} ${institution}. All Rights Reserved.</i>]]>
            </bottom>
            <group title="IceCube Software" packages="${project.packages}"/>
            <group title="Test Packages" packages="${test.packages}"/>
            <classpath>
                <path refid="dependencies.path"/>
            </classpath>
        </javadoc>
    </target>

    <target name="docs" depends="report,javadocs" description="Create API and test documents for this project">
    </target>

    <target name="javaClean" depends="setProperties" if="java.used">
        <delete>
            <fileset dir="${lib_dir}">
                <include name="${project}.jar" />
                <include name="${project}-test.jar" />
            </fileset>
        </delete>
    </target>

    <target name="cClean" depends="setProperties" if="c.used">
        <exec executable="gmake">
           <arg value="-fstandard.mk"/>
           <arg value="PLATFORM=${platform}"/>
           <arg value="PROJECT=${project}"/>
           <arg value="clean"/>
        </exec>
    </target>

    <target name="clean" depends="cClean,javaClean" description="Clean all directories and files built for this project">
        <delete dir="${build_dir}" />
        <delete dir="${api_dir}" />
        <delete dir="${junit_text_dir}" />
    </target>

</project>
